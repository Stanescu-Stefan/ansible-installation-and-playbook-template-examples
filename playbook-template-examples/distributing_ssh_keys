#we will create an ansible playbook that will distribute ssh public keys
#we need to create a directory if not already present to place the ansible configuration file

cd ~

mkdir ansible

cd ansible

vim ansible.cfg

#the config file can be written as an INI format

[defaults]
inventory=./inventory
remote_user=root

#save the file, :wq
#now we can create the inventory file, that is a list of hosts or a host group

vim inventory

#write inside the inventory file the following 192.168.122.[4:5], which represents 2 IPs for 2 hosts

#we can list the hosts by typing the following

ansible all --list-hosts

#we need to connect to the remote hosts to populate the known_hosts(after the first ssh connection to those hosts(ECDSA key fingerprint))
#in our case we can manually connect to those hosts, but when you have hundreds of hosts, you cant do that

#we can use the sshpass utility

#for Debian/Ubuntu systems

sudo apt update
sudo apt install sshpass -y

#for RHEL/Centos systems

#update the DNF package repository cache

sudo dnf makecache
#install the EPEL repository package
sudo dnf install epel-release -y
sudo dnf install sshpass -y

#we need to add into the ansible.cfg file the following line: host_key_checking = False(to bypass EDCSA key fingerprint)

ansible all -u joe -m ping

#you will get an error with permission denied. After that run the following command

ansible all -u joe --ask-pass -m ping

#you will be asked for the SSH password and the ping will be successfull

#The –ask-pass option will ask for the SSH login password only. To ask for the sudo password write become: True in your yaml playbook

#You can tell Ansible to ask for the sudo password using the –ask-become-pass option while running the playbook
#You may wish to use password-based SSH and sudo login, but do not want to type in the SSH password and sudo password every time you run a playbook
#To use password-based SSH login and sudo login without being prompted for the passwords, all you have to do 
#is add the ansible_ssh_pass and ansible_become_pass host variables or group variables in your inventory file
#If you have multiple hosts in your inventory file and each of the hosts has different passwords, 
#then add the ansible_ssh_pass and ansible_become_pass variables as host variables (after each host)

vim inventory

#add this

192.168.122.[4:5] ansible_ssh_pass=password ansible_become_pass=password

#If all or some of the hosts have the same password, then you can add the ansible_ssh_pass and ansible_become_pass variables as group variables
#after this you can run your playbooks without ansible asking for passwords(but this is still a password based connection)
#after adding all our remote hosts to the known hosts file, we can delete the passwords as we will setup a passwordless connection to our hosts


#first we need to generate a private/publick key pair

ssh-keygen -t rsa

#we can now create a playbook to deploy our key to our hosts.

vim key.yml

#start writing this

---
- name: Add Keys to hosts
  hosts: all
  tasks:
  - name: Install Key
    authorized_key:
      user: root
      state: present
      key: "{{ lookup('file', '/root/.ssh/id_rsa.pub') }}"



#we can run the playbook now

ansible-playbook key.yml

#now we can ssh to that host/s without being asked for a password

ssh 192.168.122.4


